"use strict";

const escapeRegExp = require("escape-string-regexp");
const fs = require("fs");
const path = require("path");
let _only = [];
function register(onlyList, opts = {}) {
  const registerConfig = {
    ...config(onlyList, opts),
    extensions: [".ts", ".tsx", ".es6", ".es", ".jsx", ".js", ".mjs"],
  };
  require("@babel/register")(registerConfig);
}
function config(onlyList, options) {
  _only = _only.concat(onlyList);
  return {
    babelrc: false,
    compact: false,
    configFile: false,
    browserslistConfigFile: false,
    ignore: [/\/node_modules\//],
    only: [..._only],
    plugins: [
      ...(options?.earlyPlugins ?? []),
      [require("@babel/plugin-proposal-export-namespace-from").default],
      [
        require("@babel/plugin-transform-modules-commonjs").default,
        {
          lazy: options && options.lazy,
        },
      ],
    ],
    presets: [],
    retainLines: true,
    sourceMaps: "inline",
    overrides: [
      {
        test: /\.js$/,
        plugins: [
          [require("babel-plugin-syntax-hermes-parser").default],
          [require("babel-plugin-transform-flow-enums")],
          [require("@babel/plugin-transform-flow-strip-types").default],
        ],
      },
      {
        test: /\.tsx?$/,
        plugins: [
          require("babel-plugin-replace-ts-export-assignment"),
          require("./plugins/babel-plugin-metro-replace-ts-require-assignment"),
        ],
        presets: [
          [
            require("@babel/preset-typescript").default,
            {
              allowDeclareFields: true,
              allowNamespaces: false,
            },
          ],
        ],
      },
    ],
  };
}
function buildRegExps(basePath, dirPaths) {
  return dirPaths.map((folderPath) =>
    folderPath instanceof RegExp
      ? new RegExp(
          `^${escapeRegExp(path.resolve(basePath, ".") + path.sep)}${
            folderPath.source
          }`,
          folderPath.flags
        )
      : new RegExp("^" + escapeRegExp(path.resolve(basePath, folderPath)))
  );
}
let isRegisteredForMetroMonorepo = false;
function registerForMetroMonorepo() {
  if (isRegisteredForMetroMonorepo) {
    return;
  }
  if (process.env.NODE_ENV === "production") {
    return;
  }
  if (
    !__dirname.endsWith(
      ["", "packages", "metro-babel-register", "src"].join(path.sep)
    )
  ) {
    return;
  }
  if (
    fs.existsSync(
      path.join(__dirname, "..", "src.real", path.basename(__filename))
    )
  ) {
    return;
  }
  if (process.env.FBSOURCE_ENV === "1") {
    require("@fb-tools/babel-register");
  } else {
    register([path.resolve(__dirname, "..", "..")]);
  }
  isRegisteredForMetroMonorepo = true;
}
register.config = config;
register.buildRegExps = buildRegExps;
register.unstable_registerForMetroMonorepo = registerForMetroMonorepo;
module.exports = register;
